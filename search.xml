<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS背景图片]]></title>
    <url>%2F2019%2F03%2F05%2FCSS%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[前言 背景图片示例]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>-CSS -背景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS剪切板复制方案]]></title>
    <url>%2F2019%2F03%2F05%2FJS%E5%89%AA%E5%88%87%E6%9D%BF%E5%A4%8D%E5%88%B6%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[JS的剪切板复制方案 前言 JS的剪切板方案 document.execCommand(“Copy”) 该命令可以将选中的文本复制到剪切板里。 12345678910function copy()&#123; var input=document.createElement(&quot;input&quot;); input.value=JSON.stringify(this.json); document.body.appendChild(input); input.select(); document.execCommand(&quot;Copy&quot;); input.className=&quot;input&quot;; input.style.display=&quot;none&quot;; console.log(&quot;复制成功&quot;);&#125; clipboard.js 在HTML5之前，网页上的复制功能还需要用到JS+Flash结合的方法。但是随着HTML5推出的一系列API，使得纯JS实现复制功能能够实现。 自行百度，这个没用过。]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS>transform]]></title>
    <url>%2F2019%2F03%2F03%2FCSS-transform%2F</url>
    <content type="text"></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>-CSS -动画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2F2019%2F03%2F03%2FHexo%2F</url>
    <content type="text"><![CDATA[本Hexo概况简写 记录一下创建本博客的心路历程而已，给自己看的 本博客部署时执行的命令： 12hexo ghexo d 禁用命令： 1hexo clean //会删除public下的所有文件 文档编辑器考虑到文档需要插入图片，实在是不想在折腾图片的事情了，现在从百度的方法记录下来： 将post_asset_folder后面的值改为true 安装hexo-asset-image 配置Typora编辑器图片保存的命令 Typora直接打开_posts进行编写博客 一键备份与提交执行请用node 你的文件名 比较简陋，只能输出完成之后的信息，你可以用spawn重新实现一下，对于我来说能用就行 12345678910111213141516171819202122232425262728293031323334var exec = require("child_process").exec;exec("git add . &amp;&amp; git commit -m 'newPage'", (err, stdout, stderr) =&gt; &#123; if (err) &#123; console.log("err:\n", err); return &#125; console.log("stderr:\n", stderr); console.log("git暂存与提交成功"); exec("git push", (err, stdout, stderr) =&gt; &#123; if (err) &#123; console.log("err:\n", err); return &#125; console.log("stderr:\n", stderr); console.log("git已成功推送"); exec("hexo g", (err, stdout, stderr) =&gt; &#123; if (err) &#123; console.log("err:\n", err); return &#125; console.log("stderr:\n", stderr); console.log("hexo 静态站点生成"); exec("hexo d", (err, stdout, stderr) =&gt; &#123; if (err) &#123; console.log("err:\n", err); return &#125; console.log("stderr:\n", stderr); console.log("HEXO已部署"); &#125;) &#125;) &#125;)&#125;) 注意：执行时确保有更改，不然提交出错，不过没什么影响。 有关hexo对本地文章进行分类引用链接： https://blog.csdn.net/maosidiaoxian/article/details/85220394 分析此next动画发现，用的是$.Velocity.RunSequence(sequence)这是jquery中的动画序列，好用吗？]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
